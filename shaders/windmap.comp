#version 460
#extension GL_GOOGLE_include_directive : require
layout (local_size_x = 64) in;


layout(rgba16f, set = 0, binding = 0) uniform image2D windMap;


//push constants block
layout( push_constant ) uniform constants
{
	//data1.x == time
	vec4 data1;
	vec4 data2;
	vec4 data3;
	vec4 data4;
} PushConstants;

#include "noise.glsl"

void main() {
	ivec2 mapSize = imageSize(windMap);
	float time = PushConstants.data1.x;

	if(gl_GlobalInvocationID.x >=mapSize.x*mapSize.y) return;
	ivec2 cell = ivec2(gl_GlobalInvocationID.x % mapSize.y,gl_GlobalInvocationID.x / mapSize.y);

	//float noiseValue = layeredNoise(cell+vec2(time*3.7,time*1.3),4,1,2,0.3);
	float noiseValue = cnoise(vec3(0.1*cell.x+time*0.1,0.1*cell.y+time*0.4,0.3*time));//+vec2(time*0.7,time*0.3));
	//float a = cnoise(vec3(cell.x+time*0.1,cell.y+time*0.4,0.3*time));
	//float b = cnoise(vec3(cell.x+time*0.1,cell.y+time*0.4,0.3*time)+vec3(0,1,0));
	//float c = cnoise(vec3(cell.x+time*0.1,cell.y+time*0.4,0.3*time)+vec3(1,0,0));
	//float d = cnoise(vec3(cell.x+time*0.1,cell.y+time*0.4,0.3*time)+vec3(1,1,0));
    //vec3 u = vec3(0.5);
    //float noiseValue = mix(a, b, u.x) +
    //        (c - a)* u.z * (1.0 - u.x) +
    //        (d - b) * u.x * u.z;


	vec4 windValue = min(vec4(noiseValue,noiseValue,noiseValue,1),vec4(1.));
	float r = cell.y*0.01+cell.x*0.03+time*2;
	windValue = mix(vec4(0),windValue,clamp(0.3*(sin(0.2*r+5.9))*((sin(r)*1.7)-0.7),-1,1));
	windValue += noiseValue*0.1;
	imageStore(windMap,cell,windValue);
}