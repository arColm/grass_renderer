#version 460
#extension GL_GOOGLE_include_directive : require
layout (local_size_x = 16, local_size_y = 16) in;

layout(rgba16f,set = 0, binding = 0) uniform image2D data;

#include "noise.glsl"




float getHeight(vec2 coord) {
	//return 6*fbm(coord,7,1.0,1.0,2.0,0.9);
	float height = 6*layeredNoise(coord*0.2,7,0.1,4,0.1)+5;
	//float a = 1.0/(0.1*distance(coord,imageSize(data)/2)+1);
    //float u = a*a*(3.0-2.0*a);
	//height += -25*(u);

	float a = 0.03*clamp(distance(coord,imageSize(data)/2),0,33);
	height += 15.0*(a*a*(3.0-2.0*a))-15.0;
	return height;
}

void main() {
	ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy);
	ivec2 size = imageSize(data);

	
	if(texelCoord.x < size.x && texelCoord.y < size.y)
	{
		//float height = 5*layeredNoise(vec2(texelCoord)/10,7,1.0);
		float height = getHeight(texelCoord);

		//	  T
		//	L O R
		//	  B
		// Consider writing a second compute shader for this isntead, which samples the heightmap to determine heights
		// idk if a second dispatch call is more expensive than calculating the height 4 more times, will have to profile
		// but likely doesnt matter because this only runs in initialization
		// also this conveniently handles edges
		float T = getHeight(texelCoord+vec2(0,1));
		float B = getHeight(texelCoord+vec2(0,-1));
		float L = getHeight(texelCoord+vec2(-1,0));
		float R = getHeight(texelCoord+vec2(1,0));

		vec3 horizontal = vec3(2,R-L,0);
		vec3 vertical = vec3(0,B-T,2);

		vec3 normal = normalize(cross(vertical,horizontal));
		normal = normalize(vec3(L-R,2,B-T));


		imageStore(data, texelCoord, vec4(normal,height));
	}
}