#version 460
#extension GL_GOOGLE_include_directive : require
layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

#include "computeResources.glsl"

//push constants block
layout( push_constant ) uniform constants
{
	//data1.x == time
    //data2.x == Depth
	vec4 data1;
	vec4 data2;
	vec4 data3;
	vec4 data4;
} PushConstants;

float Frequency(float k, float g, float depth)
{
    return sqrt(g * k * tanh(min(k * depth, 20)));
}

float FrequencyDerivative(float k, float g, float depth)
{
    float th = tanh(min(k * depth, 20));
    float ch = cosh(k * depth);
    return g * (depth * k / ch / ch + th) / Frequency(k, g, depth) / 2;
}

float NormalisationFactor(float s)
{
    float s2 = s * s;
    float s3 = s2 * s;
    float s4 = s3 * s;
    if (s < 5)
        return -0.000564 * s4 + 0.00776 * s3 - 0.044 * s2 + 0.192 * s + 0.163;
    else
        return -4.80e-08 * s4 + 1.07e-05 * s3 - 9.53e-04 * s2 + 5.90e-02 * s + 3.93e-01;
}

float DonelanBannerBeta(float x)
{
    if (x < 0.95)
        return 2.61 * pow(abs(x), 1.3);
    if (x < 1.6)
        return 2.28 * pow(abs(x), -1.3);
    float p = -0.4 + 0.8393 * exp(-0.567 * log(x * x));
    return pow(10, p);
}

float DonelanBanner(float theta, float omega, float peakOmega)
{
    float beta = DonelanBannerBeta(omega / peakOmega);
    float sech = 1 / cosh(beta * theta);
    return beta / 2 / tanh(beta * 3.1416) * sech * sech;
}

float Cosine2s(float theta, float s)
{
    return NormalisationFactor(s) * pow(abs(cos(0.5 * theta)), 2 * s);
}

float SpreadPower(float omega, float peakOmega)
{
    if (omega > peakOmega)
    {
        return 9.77 * pow(abs(omega / peakOmega), -2.5);
    }
    else
    {
        return 6.97 * pow(abs(omega / peakOmega), 5);
    }
}

float DirectionSpectrum(float theta, float omega, SpectrumParameters pars)
{
    float s = SpreadPower(omega, pars.peakOmega)
        + 16 * tanh(min(omega / pars.peakOmega, 20)) * pars.swell * pars.swell;
    return mix(2 / 3.1415 * cos(theta) * cos(theta), Cosine2s(theta - pars.angle, s), pars.spreadBlend);
}

float TMACorrection(float omega, float g, float depth)
{
    float omegaH = omega * sqrt(depth / g);
    if (omegaH <= 1)
        return 0.5 * omegaH * omegaH;
    if (omegaH < 2)
        return 1.0 - 0.5 * (2.0 - omegaH) * (2.0 - omegaH);
    return 1;
}

float ShortWavesFade(float kLength, SpectrumParameters pars)
{
    return exp(-pars.shortWavesFade * pars.shortWavesFade * kLength * kLength);
}

float JONSWAP(float omega, float g, float depth, SpectrumParameters pars)
{
    float sigma;
    if (omega <= pars.peakOmega)
        sigma = 0.07;
    else
        sigma = 0.09;
    float r = exp(-(omega - pars.peakOmega) * (omega - pars.peakOmega)
        / 2 / sigma / sigma / pars.peakOmega / pars.peakOmega);

    float oneOverOmega = 1 / omega;
    float peakOmegaOverOmega = pars.peakOmega / omega;
    return pars.scale * TMACorrection(omega, g, depth) * pars.alpha * g * g
        * oneOverOmega * oneOverOmega * oneOverOmega * oneOverOmega * oneOverOmega
        * exp(-1.25 * peakOmegaOverOmega * peakOmegaOverOmega * peakOmegaOverOmega * peakOmegaOverOmega)
        * pow(abs(pars.gamma), r);
}

const float g = 9.81;
const vec2 w = normalize(vec2(1,1));
const float PI = 3.1415926;

void main()
{
    float depth = PushConstants.data2.x;
    
	ivec2 id = ivec2(gl_GlobalInvocationID.xy);
	ivec2 size = imageSize(noiseTex);
	if(id.x < size.x && id.y < size.y)
    {
        float L = 40;

        float dK = 2 * PI / L;
        vec2 k = (dK * vec2(id.xy - vec2(size)/2));

        float magnitude = max(0.0001, length(k));
        float magSq = magnitude * magnitude;
        if(magnitude>0.0001)
        {
            float angle = atan(k.x,k.y);
            float omega = Frequency(magnitude, g, depth);
            float dOmegadk = FrequencyDerivative(magnitude, g, depth);

            float spectrum = JONSWAP(omega, g, depth, spectrumParams.pars[0])
                * DirectionSpectrum(angle, omega, spectrumParams.pars[0])
                * ShortWavesFade(magnitude, spectrumParams.pars[0]);

            float h0k = sqrt(2 * spectrum * abs(dOmegadk) / magnitude * dK * dK);
            
            spectrum = JONSWAP(omega, g, depth, spectrumParams.pars[0])
                * DirectionSpectrum(360-angle, omega, spectrumParams.pars[0])
                * ShortWavesFade(magnitude, spectrumParams.pars[0]);

            float negh0k = sqrt(2 * spectrum * abs(dOmegadk) / magnitude * dK * dK);

            vec4 rand = imageLoad(noiseTex, id.xy);

            imageStore(posSpectrumTex, id.xy, 5000*vec4(rand.xy * h0k, 0,0));
            imageStore(negSpectrumTex, id.xy, 5000*vec4(rand.zw * negh0k,0,0));
        }
        else
        {
            imageStore(posSpectrumTex, id.xy, vec4(0));
            imageStore(negSpectrumTex, id.xy, vec4(0));
        }
    }
}