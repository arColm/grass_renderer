#version 460
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_buffer_reference : require

layout (local_size_x = 16, local_size_y = 16) in;

#include "../../_vertex.glsl"

layout(buffer_reference, std430) writeonly buffer VertexBuffer {
	Vertex vertices[];
};


layout( push_constant ) uniform constants
{
	//data.x = number of vertices per side
	//data.y = TERRAIN_QUALITY
	vec4 data;
	VertexBuffer vertexBuffer;
} PushConstants;

//called once per vertex (x,y)
void main() {
	int numVerticesPerSide = int(PushConstants.data.x);
	int size = numVerticesPerSide * numVerticesPerSide;
	float terrainQuality = PushConstants.data.y;

	
	if(gl_GlobalInvocationID.x >=numVerticesPerSide||gl_GlobalInvocationID.y >= numVerticesPerSide) return;


	float x = (float(gl_GlobalInvocationID.x) - PushConstants.data.x/2)/terrainQuality;
	float z = (float(gl_GlobalInvocationID.y) - PushConstants.data.x/2)/terrainQuality;

	float y = -0.5;

	Vertex v;
	v.position = vec3(x,y,z);
	v.uv_x = 0;
	v.uv_y = 0;
	v.normal = vec3(0,1,0);
	v.color = vec4(0.471,0.529,0.788,0.55);
	
	uint vertexIndex = gl_GlobalInvocationID.x + gl_GlobalInvocationID.y * numVerticesPerSide;
	PushConstants.vertexBuffer.vertices[vertexIndex] = v;
}